//#region src/bimap/types.d.ts
/**
 * Bi-directional map interface.
 *
 * Keys map to values and values map back to keys.
 *
 * @template Key Type of the map keys
 * @template Value Type of the map values
 */
interface IBiMap<Key, Value> {
  /**
   * Deletes a key and its associated value from the map.
   *
   * @param key The key to delete.
   */
  delete(key: Key): boolean;
  /**
   * Deletes a value and its associated key from the map.
   *
   * @param value The value to delete.
   */
  deleteValue(value: Value): boolean;
  /**
   * Returns an iterator of [key, value] pairs.
   */
  entries(): IterableIterator<[Key, Value]>;
  /**
   * Gets the value associated with a key.
   *
   * @param key The key to look up.
   */
  get(key: Key): Value | undefined;
  /**
   * Gets the key associated with a value.
   *
   * @param value The value to look up.
   */
  getKey(value: Value): Key | undefined;
  /**
   * Checks if a key exists in the map.
   *
   * @param key The key to check.
   */
  hasKey(key: Key): boolean;
  /**
   * Checks if a value exists in the map.
   *
   * @param value The value to check.
   */
  hasValue(value: Value): boolean;
  /**
   * Returns an iterator of keys.
   */
  keys(): IterableIterator<Key>;
  /**
   * Sets a key-value pair in the map.
   *
   * @param key The key.
   * @param value The value.
   * @returns This instance for chaining.
   */
  set(key: Key, value: Value): this;
  /**
   * Number of key-value pairs in the map.
   */
  readonly size: number;
  /**
   * Returns an iterator of values.
   */
  values(): IterableIterator<Value>;
  /**
   * Enables iteration with `for...of`.
   */
  [Symbol.iterator](): IterableIterator<[Key, Value]>;
}
//#endregion
//#region src/bindings/types.d.ts
interface IBinding {
  /**
   * Optional aliasing map for named symbols.
   *
   * Keys must be a subset of `names`, values are aliases.
   *
   * @example { User: "ImportedUser" }
   */
  aliases?: Record<string, string>;
  /**
   * Name of the default binding, if any.
   *
   * @example "React"
   */
  defaultBinding?: string;
  /**
   * Source file or external module from which symbols are imported.
   *
   * @example "./models/user"
   * @example "node:path"
   */
  from: string;
  /**
   * Names of the symbols imported from the source.
   *
   * Must be non-empty unless `namespaceBinding` is true.
   * All imported names, regardless of whether they are used as types or values.
   *
   * @example ["User", "UserDTO"]
   */
  names?: ReadonlyArray<string>;
  /**
   * If this import is a namespace import (e.g. `import * as ns from "..."`),
   * this should be the namespace alias. Set to `true` if no alias is needed.
   *
   * @example "utils"
   * @example true
   */
  namespaceBinding?: boolean | string;
  /**
   * Whether the default binding is type-only.
   *
   * @example true
   */
  typeDefaultBinding?: boolean;
  /**
   * Subset of `names` that are imported using the `type` modifier.
   * These symbols will be emitted as type-only imports in TypeScript.
   *
   * @example ["UserDTO"]
   */
  typeNames?: ReadonlyArray<string>;
  /**
   * Whether the namespace binding is type-only.
   *
   * @example true
   */
  typeNamespaceBinding?: boolean;
}
//#endregion
//#region src/files/types.d.ts
/**
 * Selector array used to reference files.
 *
 * @example ["foo", "bar"]
 */
type IFileSelector = ReadonlyArray<string>;
type IFileIdentifier = number | IFileSelector;
interface IFileIn {
  /**
   * File extension, if any.
   */
  readonly extension?: string;
  /**
   * Indicates whether the file is external, meaning it is not generated
   * as part of the project but is referenced (e.g., a module from
   * node_modules).
   *
   * @example true
   */
  readonly external?: boolean;
  /**
   * Unique file ID. If one is not provided, it will be auto-generated.
   */
  readonly id?: number;
  /**
   * The desired name for the file within the project. If there are multiple files
   * with the same desired name, this might not end up being the actual name.
   *
   * @example "UserModel"
   */
  readonly name?: string;
  /**
   * Absolute logical output path for the file.
   *
   * @example "/src/models/user.ts"
   */
  readonly path?: string;
  /**
   * Selector array used to select this file.
   *
   * @example ["foo", "bar"]
   */
  readonly selector?: IFileSelector;
}
interface IFileOut extends IFileIn {
  /**
   * Unique file ID.
   */
  readonly id: number;
  /**
   * Map holding resolved names for symbols in this file.
   */
  readonly resolvedNames: IBiMap<number, string>;
  /**
   * Symbols in this file, categorized by their role.
   */
  readonly symbols: {
    /**
     * Symbols declared in the body of this file.
     */
    body: Array<number>;
    /**
     * Symbols re-exported from other files.
     */
    exports: Array<number>;
    /**
     * Symbols imported from other files.
     */
    imports: Array<number>;
  };
}
interface IFileRegistry {
  /**
   * Get a file.
   *
   * @param identifier File identifier to reference.
   * @returns The file, or undefined if not found.
   */
  get(identifier: IFileIdentifier): IFileOut | undefined;
  /**
   * Returns the current file ID and increments it.
   *
   * @returns File ID before being incremented
   */
  readonly id: number;
  /**
   * Returns whether a file is registered in the registry.
   *
   * @param identifier File identifier to check.
   * @returns True if the file is registered, false otherwise.
   */
  isRegistered(identifier: IFileIdentifier): boolean;
  /**
   * Returns a file by identifier, registering it if it doesn't exist.
   *
   * @param identifier File identifier to reference.
   * @returns The referenced or newly registered file.
   */
  reference(identifier: IFileIdentifier): IFileOut;
  /**
   * Get all unregistered files in the order they were referenced.
   *
   * @returns Array of all unregistered files, in reference order.
   */
  referenced(): IterableIterator<IFileOut>;
  /**
   * Register a file globally.
   *
   * Deduplicates identical files by ID.
   *
   * @param file File to register.
   * @returns true if added, false if duplicate.
   */
  register(file: IFileIn): IFileOut;
  /**
   * Get all files in the order they were registered.
   *
   * @returns Array of all registered files, in insert order.
   */
  registered(): IterableIterator<IFileOut>;
}
//#endregion
//#region src/extensions/types.d.ts
/**
 * Arbitrary metadata passed to the project's render function.
 *
 * Implementers should extend this interface for their own needs.
 */
interface IProjectRenderMeta {
  [key: string]: unknown;
}
/**
 * Additional metadata about the symbol.
 *
 * Implementers should extend this interface for their own needs.
 */
interface ISymbolMeta {
  [key: string]: unknown;
}
//#endregion
//#region src/symbols/types.d.ts
type ISymbolIdentifier = number | ISymbolMeta;
interface ISymbolIn {
  /**
   * Array of file names (without extensions) from which this symbol is re-exported.
   *
   * @default undefined
   */
  readonly exportFrom?: ReadonlyArray<string>;
  /**
   * Whether this symbol is exported from its own file.
   *
   * @default false
   */
  readonly exported?: boolean;
  /**
   * External module name if this symbol is imported from a module not managed
   * by the project (e.g. "zod", "lodash").
   *
   * @default undefined
   */
  readonly external?: string;
  /**
   * Optional output strategy to override default behavior.
   *
   * @returns The file path to output the symbol to, or undefined to fallback to default behavior.
   */
  readonly getFilePath?: (symbol: ISymbolOut) => string | undefined;
  /**
   * Unique symbol ID. If one is not provided, it will be auto-generated.
   */
  readonly id?: number;
  /**
   * Kind of import if this symbol represents an import.
   */
  readonly importKind?: 'namespace' | 'default' | 'named';
  /**
   * Kind of symbol.
   */
  readonly kind?: 'type';
  /**
   * Arbitrary metadata about the symbol.
   *
   * @default undefined
   */
  readonly meta?: ISymbolMeta;
  /**
   * The desired name for the symbol within its file. If there are multiple symbols
   * with the same desired name, this might not end up being the actual name.
   *
   * @example "UserModel"
   */
  readonly name?: string;
  /**
   * Placeholder name for the symbol to be replaced later with the final value.
   *
   * @example "_heyapi_31_"
   */
  readonly placeholder?: string;
}
interface ISymbolOut extends ISymbolIn {
  /**
   * Array of file names (without extensions) from which this symbol is re-exported.
   */
  readonly exportFrom: ReadonlyArray<string>;
  /**
   * Unique symbol ID.
   */
  readonly id: number;
  /**
   * Placeholder name for the symbol to be replaced later with the final value.
   *
   * @example "_heyapi_31_"
   */
  readonly placeholder: string;
}
interface ISymbolRegistry {
  /**
   * Get a symbol.
   *
   * @param identifier Symbol identifier to reference.
   * @returns The symbol, or undefined if not found.
   */
  get(identifier: ISymbolIdentifier): ISymbolOut | undefined;
  /**
   * Returns the value associated with a symbol ID.
   *
   * @param symbolId Symbol ID.
   * @return The value associated with the symbol ID, or undefined if not found.
   */
  getValue(symbolId: number): unknown;
  /**
   * Checks if the registry has a value associated with a symbol ID.
   *
   * @param symbolId Symbol ID.
   * @returns True if the registry has a value for symbol ID, false otherwise.
   */
  hasValue(symbolId: number): boolean;
  /**
   * Returns the current symbol ID and increments it.
   *
   * @returns Symbol ID before being incremented.
   */
  readonly id: number;
  /**
   * Returns whether a symbol is registered in the registry.
   *
   * @param identifier Symbol identifier to check.
   * @returns True if the symbol is registered, false otherwise.
   */
  isRegistered(identifier: ISymbolIdentifier): boolean;
  /**
   * Queries symbols by metadata filter.
   *
   * @param filter Metadata filter to query symbols by.
   * @returns Array of symbols matching the filter.
   */
  query(filter: ISymbolMeta): ReadonlyArray<ISymbolOut>;
  /**
   * References a symbol.
   *
   * @param meta Metadata filter to reference symbol by.
   * @returns The referenced symbol.
   */
  reference(meta: ISymbolMeta): ISymbolOut;
  /**
   * Register a symbol globally.
   *
   * Deduplicates identical symbols by ID.
   *
   * @param symbol Symbol to register.
   * @returns The registered symbol.
   */
  register(symbol: ISymbolIn): ISymbolOut;
  /**
   * Get all symbols in the order they were registered.
   *
   * @returns Array of all registered symbols, in insert order.
   */
  registered(): IterableIterator<ISymbolOut>;
  /**
   * Sets a value for a symbol by its ID.
   *
   * @param symbolId Symbol ID.
   * @param value The value to set.
   * @returns void
   */
  setValue(symbolId: number, value: unknown): Map<number, unknown>;
}
//#endregion
//#region src/bindings/utils.d.ts
declare const createBinding: ({
  file,
  modulePath,
  symbol,
  symbolFile
}: {
  file: IFileOut;
  modulePath: string;
  symbol: ISymbolOut;
  symbolFile: IFileOut;
}) => IBinding;
declare const mergeBindings: (target: IBinding, source: IBinding) => void;
//#endregion
//#region src/output/types.d.ts
interface IOutput {
  /**
   * The main content of the file to output.
   *
   * A raw string representing source code.
   *
   * @example "function foo(): void {\n  // implementation\n}\n"
   */
  content: string;
  /**
   * Logical output path (used for writing the file).
   *
   * @example "models/user.ts"
   */
  path: string;
}
//#endregion
//#region src/files/registry.d.ts
declare class FileRegistry implements IFileRegistry {
  private _id;
  private referenceOrder;
  private registerOrder;
  private selectorToId;
  private values;
  get(identifier: IFileIdentifier): IFileOut | undefined;
  get id(): number;
  private identifierToFile;
  isRegistered(identifier: IFileIdentifier): boolean;
  reference(identifier: IFileIdentifier): IFileOut;
  referenced(): IterableIterator<IFileOut>;
  register(file: IFileIn): IFileOut;
  registered(): IterableIterator<IFileOut>;
}
//#endregion
//#region src/project/types.d.ts
/**
 * Represents a code generation project consisting of multiple codegen files.
 * Manages imports, symbols, and output generation across the project.
 */
interface IProject {
  /**
   * The default file to assign symbols without a specific file selector.
   *
   * @default 'main'
   */
  readonly defaultFileName?: string;
  /**
   * Optional function to transform file names before they are used.
   *
   * @param name The original file name.
   * @returns The transformed file name.
   */
  readonly fileName?: (name: string) => string;
  /**
   * Centralized file registry for the project.
   */
  readonly files: IFileRegistry;
  /**
   * Produces output representations for all files in the project.
   *
   * @param meta Arbitrary metadata.
   * @returns Array of outputs ready for writing or further processing.
   * @example
   * project.render().forEach(output => writeFile(output));
   */
  render(meta?: IProjectRenderMeta): ReadonlyArray<IOutput>;
  /**
   * Map of available renderers by file extension.
   *
   * @example
   * {
   *   ".ts": tsRenderer,
   *   ".js": jsRenderer,
   * }
   */
  readonly renderers: Record<string, IRenderer>;
  /**
   * The absolute path to the root folder of the project.
   */
  readonly root: string;
  /**
   * Retrieves files that include symbol ID. The first file is the one
   * where the symbol is declared, the rest are files that re-export it.
   *
   * @param symbolId The symbol ID to find.
   * @returns An array of files containing the symbol.
   * @example
   * const files = project.symbolIdToFiles(31);
   * for (const file of files) {
   *   console.log(file.path);
   * }
   */
  symbolIdToFiles(symbolId: number): ReadonlyArray<IFileOut>;
  /**
   * Centralized symbol registry for the project.
   */
  readonly symbols: ISymbolRegistry;
}
//#endregion
//#region src/renderer/types.d.ts
interface IRenderer {
  /**
   * Renders content with replaced symbols.
   *
   * @param content Content to render.
   * @param file The file to render.
   * @param project The parent project the file belongs to.
   * @returns Rendered content.
   */
  renderFile(content: string, file: IFile, project: IProject, meta?: IProjectRenderMeta): string;
  /**
   * Returns printable data containing symbols and exports.
   *
   * @param file The file to render.
   * @param project The parent project the file belongs to.
   * @param meta Arbitrary metadata.
   * @returns Printable string containing symbols and exports.
   */
  renderSymbols(file: IFileOut, project: IProject, meta?: IProjectRenderMeta): string;
}
//#endregion
//#region src/symbols/registry.d.ts
type SymbolId = number;
declare class SymbolRegistry implements ISymbolRegistry {
  private _id;
  private indices;
  private nodes;
  private queryCache;
  private queryCacheDependencies;
  private registerOrder;
  private stubCache;
  private stubs;
  private values;
  get(identifier: ISymbolIdentifier): ISymbolOut | undefined;
  getValue(symbolId: SymbolId): unknown;
  hasValue(symbolId: SymbolId): boolean;
  get id(): SymbolId;
  isRegistered(identifier: ISymbolIdentifier): boolean;
  query(filter: ISymbolMeta): ReadonlyArray<ISymbolOut>;
  reference(meta: ISymbolMeta): ISymbolOut;
  register(symbol: ISymbolIn): ISymbolOut;
  registered(): IterableIterator<ISymbolOut>;
  setValue(symbolId: SymbolId, value: unknown): Map<SymbolId, unknown>;
  private buildCacheKey;
  private buildIndexKeySpace;
  private indexSymbol;
  private invalidateCache;
  private isSubset;
  private replaceStubs;
  private serializeIndexEntry;
}
//#endregion
//#region src/project/project.d.ts
declare class Project implements IProject {
  private symbolIdToFileIds;
  readonly defaultFileName: string;
  readonly files: FileRegistry;
  readonly fileName?: (name: string) => string;
  readonly renderers: Record<string, IRenderer>;
  readonly root: string;
  readonly symbols: SymbolRegistry;
  constructor({
    defaultFileName,
    fileName,
    renderers,
    root
  }: Pick<IProject, 'defaultFileName' | 'fileName' | 'renderers' | 'root'>);
  private getRenderer;
  private prepareFiles;
  render(meta?: IProjectRenderMeta): ReadonlyArray<IOutput>;
  symbolIdToFiles(symbolId: number): ReadonlyArray<IFileOut>;
  private symbolToFileSelector;
}
//#endregion
//#region src/renderer/utils.d.ts
/**
 *
 * @param source The source string to replace.
 * @param replacerFn Accepts a symbol ID, returns resolved symbol name.
 * @returns The replaced source string.
 */
declare const renderIds: (source: string, replacerFn: (symbolId: number) => string | undefined) => string;
//#endregion
export { type IBiMap as BiMap, type IBinding as Binding, type IFileOut as File, type IFileIdentifier as FileIdentifier, type IFileIn as FileIn, type IProject, type IOutput as Output, Project, type IProjectRenderMeta as ProjectRenderMeta, type IRenderer as Renderer, type ISymbolOut as Symbol, type ISymbolIdentifier as SymbolIdentifier, type ISymbolIn as SymbolIn, type ISymbolMeta as SymbolMeta, createBinding, mergeBindings, renderIds };
//# sourceMappingURL=index.d.cts.map