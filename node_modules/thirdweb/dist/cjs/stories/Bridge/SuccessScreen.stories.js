"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionPayment = exports.ComplexPaymentLight = exports.ComplexPayment = exports.OnrampPaymentLight = exports.OnrampPayment = exports.DefaultLight = exports.Default = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const viem_1 = require("viem");
const WindowAdapter_js_1 = require("../../react/web/adapters/WindowAdapter.js");
const SuccessScreen_js_1 = require("../../react/web/ui/Bridge/payment-success/SuccessScreen.js");
const utils_js_1 = require("../utils.js");
const fixtures_js_1 = require("./fixtures.js");
const mockBuyCompletedStatuses = JSON.parse((0, viem_1.stringify)([
    {
        type: "buy",
        status: "COMPLETED",
        paymentId: "payment-12345",
        originAmount: 1000000000000000000n,
        destinationAmount: 100000000n,
        originChainId: 1,
        destinationChainId: 1,
        originTokenAddress: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
        destinationTokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        originToken: {
            chainId: 1,
            address: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
            symbol: "ETH",
            name: "Ethereum",
            decimals: 18,
            priceUsd: 2500,
        },
        destinationToken: {
            chainId: 1,
            address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
            symbol: "USDC",
            name: "USD Coin",
            decimals: 6,
            priceUsd: 1,
        },
        sender: "0xa3841994009B4fEabb01ebcC62062F9E56F701CD",
        receiver: "0xa3841994009B4fEabb01ebcC62062F9E56F701CD",
        transactions: [
            {
                chainId: 1,
                transactionHash: "0x1234567890abcdef1234567890abcdef12345678901234567890abcdef123456",
            },
        ],
    },
]));
const mockOnrampCompletedStatuses = JSON.parse((0, viem_1.stringify)([
    {
        type: "onramp",
        status: "COMPLETED",
        transactions: [
            {
                chainId: 137,
                transactionHash: "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
            },
        ],
        purchaseData: {
            orderId: "stripe-order-abc123",
        },
    },
]));
// Wrapper component to provide theme context
const SuccessScreenWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return ((0, jsx_runtime_1.jsx)(utils_js_1.ModalThemeWrapper, { theme: theme, children: (0, jsx_runtime_1.jsx)(SuccessScreen_js_1.SuccessScreen, { ...componentProps }) }));
};
const meta = {
    title: "Bridge/SuccessScreen",
    component: SuccessScreenWithTheme,
    parameters: {
        layout: "centered",
        docs: {
            description: {
                component: "Success screen that displays completion confirmation with transaction summary, payment details, and action buttons for next steps. Includes animated success icon and detailed transaction view.",
            },
        },
    },
    tags: ["autodocs"],
    args: {
        preparedQuote: fixtures_js_1.simpleBuyQuote,
        completedStatuses: mockBuyCompletedStatuses,
        onDone: () => { },
        theme: "dark",
        windowAdapter: WindowAdapter_js_1.webWindowAdapter,
        uiOptions: fixtures_js_1.FUND_WALLET_UI_OPTIONS.ethDefault,
    },
    argTypes: {
        theme: {
            control: "select",
            options: ["light", "dark"],
            description: "Theme for the component",
        },
        onDone: { action: "success screen closed" },
    },
};
exports.default = meta;
exports.Default = {
    args: {
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
exports.DefaultLight = {
    args: {
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
exports.OnrampPayment = {
    args: {
        theme: "dark",
        preparedQuote: fixtures_js_1.simpleOnrampQuote,
        completedStatuses: mockOnrampCompletedStatuses,
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Success screen for onramp payments showing payment ID that can be copied to clipboard.",
            },
        },
    },
};
exports.OnrampPaymentLight = {
    args: {
        theme: "light",
        preparedQuote: fixtures_js_1.simpleOnrampQuote,
        completedStatuses: mockOnrampCompletedStatuses,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
exports.ComplexPayment = {
    args: {
        theme: "dark",
        preparedQuote: fixtures_js_1.simpleOnrampQuote,
        completedStatuses: [
            ...mockOnrampCompletedStatuses,
            ...mockBuyCompletedStatuses,
        ],
    },
    parameters: {
        backgrounds: { default: "dark" },
        docs: {
            description: {
                story: "Success screen for onramp payments showing payment ID that can be copied to clipboard.",
            },
        },
    },
};
exports.ComplexPaymentLight = {
    args: {
        theme: "light",
        preparedQuote: fixtures_js_1.simpleOnrampQuote,
        completedStatuses: [
            ...mockOnrampCompletedStatuses,
            ...mockBuyCompletedStatuses,
        ],
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
exports.TransactionPayment = {
    args: {
        theme: "light",
        preparedQuote: fixtures_js_1.simpleBuyQuote,
        completedStatuses: mockBuyCompletedStatuses,
        uiOptions: fixtures_js_1.TRANSACTION_UI_OPTIONS.contractInteraction,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
//# sourceMappingURL=SuccessScreen.stories.js.map