"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionWidget = TransactionWidget;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const addresses_js_1 = require("../../../../constants/addresses.js");
const prepare_transaction_js_1 = require("../../../../transaction/prepare-transaction.js");
const address_js_1 = require("../../../../utils/address.js");
const json_js_1 = require("../../../../utils/json.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const ConnectEmbed_js_1 = require("../ConnectWallet/Modal/ConnectEmbed.js");
const getConnectLocale_js_1 = require("../ConnectWallet/locale/getConnectLocale.js");
const DynamicHeight_js_1 = require("../components/DynamicHeight.js");
const Spinner_js_1 = require("../components/Spinner.js");
const BridgeOrchestrator_js_1 = require("./BridgeOrchestrator.js");
const UnsupportedTokenScreen_js_1 = require("./UnsupportedTokenScreen.js");
/**
 * Widget a prebuilt UI for purchasing a specific token.
 *
 * @param props - Props of type [`TransactionWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetProps) to configure the TransactionWidget component.
 *
 * @example
 * ### Default configuration
 *
 * By default, the `TransactionWidget` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *  />
 * ```
 *
 * ### Customize the UI
 *
 * You can customize the UI of the `TransactionWidget` component by passing a custom theme object to the `theme` prop.
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   theme={darkTheme({
 *     colors: {
 *       modalBg: "red",
 *     },
 *   })}
 * />
 * ```
 *
 * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.
 *
 * ### Update the Title
 *
 * You can update the title of the widget by passing a `title` prop to the `TransactionWidget` component.
 *
 * ```tsx
 * <TransactionWidget
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   client={client}
 *   title="Transaction ETH"
 * />
 * ```
 *
 * ### Configure the wallet connection
 *
 * You can customize the wallet connection flow by passing a `connectOptions` object to the `TransactionWidget` component.
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *       title: "Sign in",
 *     }
 *   }}
 * />
 * ```
 *
 * Refer to the [`TransactionWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetConnectOptions) type for more details.
 *
 * @bridge
 * @beta
 * @react
 */
function TransactionWidget(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.locale || "en_US");
    const theme = props.theme || "dark";
    const bridgeDataQuery = (0, react_query_1.useQuery)({
        queryKey: ["bridgeData", (0, json_js_1.stringify)(props)],
        queryFn: async () => {
            const transaction = (0, prepare_transaction_js_1.prepareTransaction)({
                ...props.transaction,
                erc20Value: props.amount
                    ? {
                        amountWei: props.amount,
                        tokenAddress: (0, address_js_1.checksumAddress)(props.tokenAddress || addresses_js_1.NATIVE_TOKEN_ADDRESS),
                    }
                    : props.transaction.erc20Value,
            });
            return {
                type: "success",
                data: {
                    mode: "transaction",
                    metadata: {
                        title: props.title,
                        description: props.description,
                        image: props.image,
                    },
                    transaction,
                },
            };
        },
    });
    let content = null;
    if (!localeQuery.data || bridgeDataQuery.isLoading) {
        content = ((0, jsx_runtime_1.jsx)("div", { style: {
                minHeight: "350px",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xl", color: "secondaryText" }) }));
    }
    else if (bridgeDataQuery.data?.type === "unsupported_token") {
        // Show unsupported token screen
        content = (0, jsx_runtime_1.jsx)(UnsupportedTokenScreen_js_1.UnsupportedTokenScreen, { chain: bridgeDataQuery.data.chain });
    }
    else if (bridgeDataQuery.data?.type === "success") {
        // Show normal bridge orchestrator
        content = ((0, jsx_runtime_1.jsx)(BridgeOrchestrator_js_1.BridgeOrchestrator, { client: props.client, uiOptions: bridgeDataQuery.data.data, connectOptions: props.connectOptions, connectLocale: localeQuery.data, purchaseData: props.purchaseData, paymentLinkId: props.paymentLinkId, onComplete: () => {
                props.onSuccess?.();
            }, onError: (err) => {
                props.onError?.(err);
            }, onCancel: () => {
                props.onCancel?.();
            }, presetOptions: props.presetOptions, receiverAddress: undefined }));
    }
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: theme, children: (0, jsx_runtime_1.jsx)(ConnectEmbed_js_1.EmbedContainer, { modalSize: "compact", style: props.style, className: props.className, children: (0, jsx_runtime_1.jsx)(DynamicHeight_js_1.DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=TransactionWidget.js.map