"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenSelection = TokenSelection;
const jsx_runtime_1 = require("react/jsx-runtime");
const CustomThemeProvider_js_1 = require("../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const useBridgeQuote_js_1 = require("../../../../core/hooks/useBridgeQuote.js");
const formatTokenBalance_js_1 = require("../../ConnectWallet/screens/formatTokenBalance.js");
const Skeleton_js_1 = require("../../components/Skeleton.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const buttons_js_1 = require("../../components/buttons.js");
const text_js_1 = require("../../components/text.js");
const TokenAndChain_js_1 = require("../common/TokenAndChain.js");
function PaymentMethodTokenRow({ paymentMethod, destinationToken, destinationAmount, client, onPaymentMethodSelected, }) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    // Fetch individual quote for this specific token pair
    const { data: quote, isLoading: quoteLoading, error: quoteError, } = (0, useBridgeQuote_js_1.useBridgeQuote)({
        originToken: paymentMethod.originToken,
        destinationToken,
        destinationAmount,
        client,
    });
    // Use the fetched originAmount if available, otherwise fall back to the one from paymentMethod
    const displayOriginAmount = quote?.originAmount;
    const hasEnoughBalance = displayOriginAmount
        ? paymentMethod.balance >= displayOriginAmount
        : false;
    return ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "secondary", fullWidth: true, onClick: () => onPaymentMethodSelected(paymentMethod), disabled: !hasEnoughBalance, style: {
            border: `1px solid ${theme.colors.borderColor}`,
            borderRadius: index_js_1.radius.md,
            padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md}`,
            backgroundColor: theme.colors.tertiaryBg,
            opacity: hasEnoughBalance ? 1 : 0.5,
            textAlign: "left",
        }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "md", style: { width: "100%", alignItems: "center" }, children: [(0, jsx_runtime_1.jsx)(TokenAndChain_js_1.TokenAndChain, { token: paymentMethod.originToken, client: client, size: "lg", style: {
                        maxWidth: "50%",
                    } }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", style: { flex: 1, alignItems: "flex-end" }, children: [quoteLoading ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "80px", height: "16px" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "50px", height: "12px" }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "40px", height: "12px" })] })] })) : quoteError ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "danger", style: { fontWeight: 600 }, children: "Quote failed" })) : displayOriginAmount ? ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", color: "primaryText", style: { fontWeight: 600, textWrap: "nowrap" }, children: [(0, formatTokenBalance_js_1.formatTokenAmount)(displayOriginAmount, paymentMethod.originToken.decimals), " ", paymentMethod.originToken.symbol] })) : ("--.--"), !quoteLoading && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", children: [(0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "xs", color: "secondaryText", children: ["Balance:", " "] }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: !quoteLoading
                                        ? hasEnoughBalance
                                            ? "success"
                                            : "danger"
                                        : "secondaryText", children: (0, formatTokenBalance_js_1.formatTokenAmount)(paymentMethod.balance, paymentMethod.originToken.decimals) })] }))] })] }) }, `${paymentMethod.originToken.address}-${paymentMethod.originToken.chainId}`));
}
function TokenSelection({ paymentMethods, paymentMethodsLoading, client, onPaymentMethodSelected, onBack, destinationToken, destinationAmount, }) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    if (paymentMethodsLoading) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", children: "Loading your tokens" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "sm", children: [1, 2, 3].map((i) => ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: index_js_1.radius.md,
                            padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md}`,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "md", style: { width: "100%", alignItems: "center" }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", center: "y", style: { maxWidth: "50%" }, children: [(0, jsx_runtime_1.jsx)("div", { style: {
                                                width: "32px",
                                                height: "32px",
                                                backgroundColor: theme.colors.skeletonBg,
                                                borderRadius: "50%",
                                            } }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "60px", height: "14px" }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "40px", height: "12px" })] })] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", style: { flex: 1, alignItems: "flex-end" }, children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "80px", height: "16px" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "50px", height: "12px" }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "40px", height: "12px" })] })] })] }) }, i))) })] }));
    }
    if (paymentMethods.length === 0) {
        return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", center: "both", style: { minHeight: "250px" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", center: true, children: "No available tokens found for this wallet" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", center: true, children: "Try connecting a different wallet or pay with card" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "primary", onClick: onBack, children: "Select another payment method" })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", children: "Select payment token" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "sm", style: {
                    maxHeight: "400px",
                    overflowY: "auto",
                    scrollbarWidth: "none",
                }, children: paymentMethods
                    .filter((method) => method.type === "wallet")
                    .map((method) => ((0, jsx_runtime_1.jsx)(PaymentMethodTokenRow, { paymentMethod: method, destinationToken: destinationToken, destinationAmount: destinationAmount, client: client, onPaymentMethodSelected: onPaymentMethodSelected }, `${method.originToken.address}-${method.originToken.chainId}`))) })] }));
}
//# sourceMappingURL=TokenSelection.js.map