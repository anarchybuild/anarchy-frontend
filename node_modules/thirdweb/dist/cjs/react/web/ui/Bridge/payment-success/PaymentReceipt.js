"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentReceipt = PaymentReceipt;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const utils_js_1 = require("../../../../../chains/utils.js");
const address_js_1 = require("../../../../../utils/address.js");
const url_js_1 = require("../../../../../utils/url.js");
const CustomThemeProvider_js_1 = require("../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const formatTokenBalance_js_1 = require("../../ConnectWallet/screens/formatTokenBalance.js");
const ChainName_js_1 = require("../../components/ChainName.js");
const Skeleton_js_1 = require("../../components/Skeleton.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
function getPaymentId(preparedQuote, status) {
    if (preparedQuote.type === "onramp") {
        return preparedQuote.id;
    }
    return status.transactions[status.transactions.length - 1]?.transactionHash;
}
/**
 * Hook to fetch transaction info for a completed status
 */
function useTransactionInfo(status, preparedQuote) {
    return (0, react_query_1.useQuery)({
        queryKey: [
            "transaction-info",
            status.type,
            getPaymentId(preparedQuote, status),
        ],
        queryFn: async () => {
            const isOnramp = status.type === "onramp";
            if (isOnramp && preparedQuote.type === "onramp") {
                // For onramp, create a display ID since OnrampStatus doesn't have paymentId
                return {
                    type: "paymentId",
                    id: preparedQuote.id,
                    label: "Onramp Payment",
                    destinationToken: preparedQuote.destinationToken,
                    chain: await (0, utils_js_1.getChainMetadata)((0, utils_js_1.defineChain)(preparedQuote.destinationToken.chainId)),
                    amountPaid: `${preparedQuote.currencyAmount} ${preparedQuote.currency}`,
                    amountReceived: `${(0, formatTokenBalance_js_1.formatTokenAmount)(preparedQuote.destinationAmount, preparedQuote.destinationToken.decimals)} ${preparedQuote.destinationToken.symbol}`,
                };
            }
            else if (status.type === "buy" ||
                status.type === "sell" ||
                status.type === "transfer") {
                if (status.transactions.length > 0) {
                    // get the last transaction hash
                    const tx = status.transactions[status.transactions.length - 1];
                    if (tx) {
                        const [destinationChain, originChain] = await Promise.all([
                            (0, utils_js_1.getChainMetadata)((0, utils_js_1.getCachedChain)(status.destinationToken.chainId)),
                            (0, utils_js_1.getChainMetadata)((0, utils_js_1.getCachedChain)(status.originToken.chainId)),
                        ]);
                        return {
                            type: "transactionHash",
                            id: tx.transactionHash,
                            label: "Transaction",
                            chain: destinationChain,
                            originToken: status.originToken,
                            originChain,
                            destinationToken: status.destinationToken,
                            amountReceived: `${(0, formatTokenBalance_js_1.formatTokenAmount)(status.destinationAmount, status.destinationToken.decimals)} ${status.destinationToken.symbol}`,
                            amountPaid: `${(0, formatTokenBalance_js_1.formatTokenAmount)(status.originAmount, status.originToken.decimals)} ${status.originToken.symbol}`,
                        };
                    }
                }
            }
            return null;
        },
        enabled: true,
        staleTime: 5 * 60 * 1000, // 5 minutes
    });
}
/**
 * Component to display details for a completed transaction step
 */
function CompletedStepDetailCard({ status, preparedQuote, windowAdapter, onCopyToClipboard, }) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const { data: txInfo, isLoading } = useTransactionInfo(status, preparedQuote);
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "sm", style: {
                padding: index_js_1.spacing.md,
                borderRadius: index_js_1.radius.sm,
                backgroundColor: theme.colors.tertiaryBg,
                border: `1px solid ${theme.colors.borderColor}`,
            }, children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "30px" }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "30px" }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "30px" })] }));
    }
    if (!txInfo) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "sm", style: {
            padding: index_js_1.spacing.md,
            borderRadius: index_js_1.radius.sm,
            backgroundColor: theme.colors.tertiaryBg,
            border: `1px solid ${theme.colors.borderColor}`,
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", style: {
                    alignItems: "center",
                    justifyContent: "space-between",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: txInfo.label }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                            padding: `${index_js_1.spacing["3xs"]} ${index_js_1.spacing.xs}`,
                            borderRadius: index_js_1.radius.sm,
                            backgroundColor: theme.colors.success,
                        }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", style: { color: theme.colors.primaryButtonText }, children: "COMPLETED" }) })] }), txInfo.amountPaid && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: { justifyContent: "space-between" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Amount Paid" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: txInfo.amountPaid })] })), txInfo.originChain && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: { justifyContent: "space-between" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Origin Chain" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: (0, ChainName_js_1.shorterChainName)(txInfo.chain.name) })] })), txInfo.amountReceived && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: { justifyContent: "space-between" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Amount Received" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: txInfo.amountReceived })] })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: { justifyContent: "space-between" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Chain" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: (0, ChainName_js_1.shorterChainName)(txInfo.chain.name) })] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: { justifyContent: "space-between" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: txInfo.type === "paymentId" ? "Payment ID" : "Transaction Hash" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", style: { alignItems: "center" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "accentText", style: {
                                    fontFamily: "monospace",
                                    cursor: "pointer",
                                }, onClick: txInfo.type === "paymentId"
                                    ? () => onCopyToClipboard(txInfo.id)
                                    : () => {
                                        const explorer = txInfo.chain.explorers?.[0];
                                        if (explorer) {
                                            windowAdapter.open((0, url_js_1.formatExplorerTxUrl)(explorer.url, txInfo.id));
                                        }
                                    }, children: (0, address_js_1.shortenHex)(txInfo.id) }), txInfo.type === "paymentId" ? ((0, jsx_runtime_1.jsx)("button", { type: "button", style: {
                                    cursor: "pointer",
                                    background: "none",
                                    border: "none",
                                    padding: 0,
                                }, onClick: () => onCopyToClipboard(txInfo.id), children: (0, jsx_runtime_1.jsx)(react_icons_1.CopyIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, color: theme.colors.primaryText }) })) : null] })] })] }, txInfo.id));
}
function PaymentReceipt({ preparedQuote, completedStatuses, onBack, windowAdapter, }) {
    // Copy to clipboard
    const copyToClipboard = (0, react_1.useCallback)(async (text) => {
        try {
            await navigator.clipboard.writeText(text);
            // Could add a toast notification here
        }
        catch (error) {
            console.warn("Failed to copy to clipboard:", error);
        }
    }, []);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", fullHeight: true, p: "lg", style: { maxHeight: "500px", minHeight: "250px", overflowY: "auto" }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Payment Receipt", onBack: onBack }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "lg", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", children: "Transactions" }), completedStatuses.map((status, index) => ((0, jsx_runtime_1.jsx)(CompletedStepDetailCard, { status: status, preparedQuote: preparedQuote, windowAdapter: windowAdapter, onCopyToClipboard: copyToClipboard }, `${status.type}-${index}`)))] }) })] }));
}
//# sourceMappingURL=PaymentReceipt.js.map