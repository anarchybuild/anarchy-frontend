"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionPayment = TransactionPayment;
const jsx_runtime_1 = require("react/jsx-runtime");
const address_js_1 = require("../../../../utils/address.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useTransactionDetails_js_1 = require("../../../core/hooks/useTransactionDetails.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const ConnectButton_js_1 = require("../ConnectWallet/ConnectButton.js");
const PoweredByTW_js_1 = require("../ConnectWallet/PoweredByTW.js");
const ChainName_js_1 = require("../components/ChainName.js");
const Spacer_js_1 = require("../components/Spacer.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const text_js_1 = require("../components/text.js");
const TokenAndChain_js_1 = require("./common/TokenAndChain.js");
const WithHeader_js_1 = require("./common/WithHeader.js");
function TransactionPayment({ uiOptions, client, onContinue, connectOptions, }) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    // Get chain metadata for native currency symbol
    const chainMetadata = (0, useChainQuery_js_1.useChainMetadata)(uiOptions.transaction.chain);
    // Use the extracted hook for transaction details
    const transactionDataQuery = (0, useTransactionDetails_js_1.useTransactionDetails)({
        transaction: uiOptions.transaction,
        client,
    });
    const contractName = transactionDataQuery.data?.contractMetadata?.name || "Unknown Contract";
    const functionName = transactionDataQuery.data?.functionInfo?.functionName || "Contract Call";
    const isLoading = transactionDataQuery.isLoading || chainMetadata.isLoading;
    const buttonLabel = `Execute ${functionName}`;
    // Skeleton component for loading state
    const SkeletonRow = ({ width = "100%" }) => ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
            justifyContent: "space-between",
            alignItems: "center",
        }, children: [(0, jsx_runtime_1.jsx)("div", { style: {
                    width: "30%",
                    height: "16px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: index_js_1.spacing.xs,
                } }), (0, jsx_runtime_1.jsx)("div", { style: {
                    width,
                    height: "16px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: index_js_1.spacing.xs,
                } })] }));
    const SkeletonHeader = () => ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "3xs", style: {
            justifyContent: "space-between",
        }, children: [(0, jsx_runtime_1.jsx)("div", { style: {
                    width: "80px",
                    height: "32px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: index_js_1.spacing.xs,
                } }), (0, jsx_runtime_1.jsx)("div", { style: {
                    width: "120px",
                    height: "24px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: index_js_1.spacing.sm,
                } })] }));
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)(WithHeader_js_1.WithHeader, { uiOptions: uiOptions, defaultTitle: "Transaction", client: client, children: [(0, jsx_runtime_1.jsx)(SkeletonHeader, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(SkeletonRow, { width: "60%" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(SkeletonRow, { width: "40%" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(SkeletonRow, { width: "50%" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(SkeletonRow, { width: "45%" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(SkeletonRow, { width: "55%" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)("div", { style: {
                        width: "100%",
                        height: "48px",
                        backgroundColor: theme.colors.skeletonBg,
                        borderRadius: index_js_1.spacing.md,
                    } }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(WithHeader_js_1.WithHeader, { uiOptions: uiOptions, defaultTitle: "Transaction", client: client, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "3xs", style: {
                    justifyContent: "space-between",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xl", color: "primaryText", weight: 700, children: transactionDataQuery.data?.usdValueDisplay ||
                            transactionDataQuery.data?.txCostDisplay }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "secondaryText", style: {
                            fontFamily: "monospace",
                            textAlign: "right",
                            backgroundColor: theme.colors.tertiaryBg,
                            padding: `${index_js_1.spacing.xs} ${index_js_1.spacing.sm}`,
                            borderRadius: index_js_1.spacing.sm,
                        }, children: functionName })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Contract" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: contractName })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Address" }), (0, jsx_runtime_1.jsx)("a", { href: `https://thirdweb.com/${uiOptions.transaction.chain.id}/${uiOptions.transaction.to}`, target: "_blank", rel: "noopener noreferrer", style: {
                            color: theme.colors.accentText,
                            textDecoration: "none",
                            fontFamily: "monospace",
                            fontSize: index_js_1.fontSize.sm,
                        }, children: (0, address_js_1.shortenAddress)(uiOptions.transaction.to) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Network" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", center: "y", children: [(0, jsx_runtime_1.jsx)(TokenAndChain_js_1.ChainIcon, { chain: uiOptions.transaction.chain, size: "xs", client: client }), (0, jsx_runtime_1.jsx)(ChainName_js_1.ChainName, { chain: uiOptions.transaction.chain, client: client, size: "sm", color: "primaryText", short: true, style: {
                                    fontFamily: "monospace",
                                } })] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), transactionDataQuery.data?.txCostDisplay && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                            justifyContent: "space-between",
                            alignItems: "center",
                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Cost" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.txCostDisplay })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" })] })), transactionDataQuery.data?.gasCostDisplay && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
                            justifyContent: "space-between",
                            alignItems: "center",
                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Network fees" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.gasCostDisplay })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), activeAccount ? ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "primary", fullWidth: true, onClick: () => {
                    if (transactionDataQuery.data?.tokenInfo) {
                        onContinue(transactionDataQuery.data.totalCost, transactionDataQuery.data.tokenInfo, (0, address_js_1.getAddress)(activeAccount.address));
                    }
                }, style: {
                    padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md}`,
                    fontSize: index_js_1.fontSize.md,
                }, children: buttonLabel })) : ((0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { client: client, theme: theme, connectButton: {
                    label: buttonLabel,
                }, ...connectOptions })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=TransactionPayment.js.map