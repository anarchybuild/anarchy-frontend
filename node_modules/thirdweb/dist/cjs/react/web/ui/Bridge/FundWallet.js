"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FundWallet = FundWallet;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const address_js_1 = require("../../../../utils/address.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const ConnectButton_js_1 = require("../ConnectWallet/ConnectButton.js");
const PoweredByTW_js_1 = require("../ConnectWallet/PoweredByTW.js");
const OutlineWalletIcon_js_1 = require("../ConnectWallet/icons/OutlineWalletIcon.js");
const WalletRow_js_1 = require("../ConnectWallet/screens/Buy/swap/WalletRow.js");
const Spacer_js_1 = require("../components/Spacer.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const formElements_js_1 = require("../components/formElements.js");
const text_js_1 = require("../components/text.js");
const TokenAndChain_js_1 = require("./common/TokenAndChain.js");
const WithHeader_js_1 = require("./common/WithHeader.js");
function FundWallet({ client, receiverAddress, uiOptions, onContinue, presetOptions = [5, 10, 20], connectOptions, }) {
    const [amount, setAmount] = (0, react_1.useState)(uiOptions.initialAmount ?? "");
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const receiver = receiverAddress ?? account?.address;
    const handleAmountChange = (inputValue) => {
        let processedValue = inputValue;
        // Replace comma with period if it exists
        processedValue = processedValue.replace(",", ".");
        if (processedValue.startsWith(".")) {
            processedValue = `0${processedValue}`;
        }
        const numValue = Number(processedValue);
        if (Number.isNaN(numValue)) {
            return;
        }
        if (processedValue.startsWith("0") && !processedValue.startsWith("0.")) {
            setAmount(processedValue.slice(1));
        }
        else {
            setAmount(processedValue);
        }
    };
    const getAmountFontSize = () => {
        const length = amount.length;
        if (length > 12)
            return index_js_1.fontSize.md;
        if (length > 8)
            return index_js_1.fontSize.lg;
        return index_js_1.fontSize.xl;
    };
    const isValidAmount = amount && Number(amount) > 0;
    const focusInput = () => {
        const input = document.querySelector("#amount-input");
        input?.focus();
    };
    const handleQuickAmount = (usdAmount) => {
        if (uiOptions.destinationToken.priceUsd === 0) {
            return;
        }
        // Convert USD amount to token amount using token price
        const tokenAmount = usdAmount / uiOptions.destinationToken.priceUsd;
        // Format to reasonable decimal places (up to 6 decimals, remove trailing zeros)
        const formattedAmount = Number.parseFloat(tokenAmount.toFixed(6)).toString();
        setAmount(formattedAmount);
    };
    return ((0, jsx_runtime_1.jsxs)(WithHeader_js_1.WithHeader, { uiOptions: uiOptions, defaultTitle: `Buy ${uiOptions.destinationToken.symbol}`, client: client, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "both", gap: "3xs", p: "md", style: {
                            flexWrap: "nowrap",
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: index_js_1.radius.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: [(0, jsx_runtime_1.jsx)(TokenAndChain_js_1.TokenAndChain, { token: uiOptions.destinationToken, client: client, size: "xl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", center: "x", expand: true, style: {
                                    justifyContent: "flex-end",
                                    alignItems: "flex-end",
                                }, children: [(0, jsx_runtime_1.jsx)("div", { style: { cursor: "text" }, onClick: focusInput, onKeyDown: (e) => {
                                            if (e.key === "Enter" || e.key === " ") {
                                                e.preventDefault();
                                                focusInput();
                                            }
                                        }, role: "button", tabIndex: 0, children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "y", gap: "xs", style: {
                                                flexWrap: "nowrap",
                                                justifyContent: "flex-end",
                                            }, children: (0, jsx_runtime_1.jsx)(formElements_js_1.Input, { id: "amount-input", variant: "transparent", pattern: "^[0-9]*[.,]?[0-9]*$", inputMode: "decimal", placeholder: "0", type: "text", "data-placeholder": amount === "", value: amount || "0", onClick: (e) => {
                                                    // put cursor at the end of the input
                                                    if (amount === "") {
                                                        e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                                    }
                                                }, onChange: (e) => {
                                                    handleAmountChange(e.target.value);
                                                }, style: {
                                                    fontSize: getAmountFontSize(),
                                                    fontWeight: 600,
                                                    textAlign: "right",
                                                    padding: "0",
                                                    border: "none",
                                                    boxShadow: "none",
                                                } }) }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "both", style: { height: index_js_1.fontSize.lg, flexWrap: "nowrap" }, children: (0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "md", color: "secondaryText", style: { textWrap: "nowrap" }, children: ["\u2248 $", (Number(amount) * uiOptions.destinationToken.priceUsd).toFixed(2)] }) })] })] }), presetOptions && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", gap: "xs", style: {
                                    justifyContent: "space-evenly",
                                }, children: presetOptions?.map((amount) => ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", onClick: () => handleQuickAmount(Number(amount)), style: {
                                        padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md}`,
                                        fontSize: index_js_1.fontSize.sm,
                                        flex: 1,
                                        backgroundColor: theme.colors.tertiaryBg,
                                    }, children: ["$", amount] }, amount))) })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "sm", px: "md", py: "sm", center: "y", color: "secondaryText", style: {
                            border: `1px solid ${theme.colors.borderColor}`,
                            backgroundColor: theme.colors.tertiaryBg,
                            borderRadius: index_js_1.radius.md,
                        }, children: receiver ? ((0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { address: receiver, client: client, iconSize: "md", textSize: "sm" })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(OutlineWalletIcon_js_1.OutlineWalletIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", style: {
                                        flex: 1,
                                    }, children: "No Wallet Connected" })] })) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), receiver ? ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "primary", fullWidth: true, disabled: !isValidAmount, onClick: () => {
                    if (isValidAmount) {
                        onContinue(amount, uiOptions.destinationToken, (0, address_js_1.getAddress)(receiver));
                    }
                }, style: {
                    padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md}`,
                    fontSize: index_js_1.fontSize.md,
                }, children: ["Buy ", amount, " ", uiOptions.destinationToken.symbol] })) : ((0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { client: client, theme: theme, connectButton: {
                    label: `Buy ${amount} ${uiOptions.destinationToken.symbol}`,
                }, ...connectOptions })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=FundWallet.js.map