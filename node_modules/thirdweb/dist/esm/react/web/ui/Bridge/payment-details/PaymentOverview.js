import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { defineChain } from "../../../../../chains/utils.js";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { radius, spacing } from "../../../../core/design-system/index.js";
import { useTransactionDetails } from "../../../../core/hooks/useTransactionDetails.js";
import { getFiatCurrencyIcon } from "../../ConnectWallet/screens/Buy/fiat/currencies.js";
import { FiatValue } from "../../ConnectWallet/screens/Buy/swap/FiatValue.js";
import { StepConnectorArrow } from "../../ConnectWallet/screens/Buy/swap/StepConnector.js";
import { WalletRow } from "../../ConnectWallet/screens/Buy/swap/WalletRow.js";
import { Container } from "../../components/basic.js";
import { Text } from "../../components/text.js";
import { TokenBalanceRow } from "../common/TokenBalanceRow.js";
export function PaymentOverview(props) {
    const theme = useCustomTheme();
    const sender = props.sender ||
        (props.paymentMethod.type === "wallet"
            ? props.paymentMethod.payerWallet.getAccount()?.address
            : undefined);
    const isDifferentRecipient = props.receiver.toLowerCase() !== sender?.toLowerCase();
    return (_jsxs(Container, { children: [_jsxs(Container, { bg: "tertiaryBg", flex: "column", style: {
                    borderRadius: radius.lg,
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: [sender && (_jsx(Container, { flex: "row", gap: "sm", px: "md", py: "sm", style: {
                            borderBottom: `1px solid ${theme.colors.borderColor}`,
                        }, children: _jsx(WalletRow, { address: sender, client: props.client, iconSize: "md", textSize: "sm" }) })), props.paymentMethod.type === "wallet" && (_jsx(TokenBalanceRow, { token: props.paymentMethod.originToken, client: props.client, amount: props.fromAmount, onClick: () => { }, style: {
                            background: "transparent",
                            borderRadius: 0,
                            border: "none",
                        } })), props.paymentMethod.type === "fiat" && (_jsxs(Container, { flex: "row", gap: "sm", px: "md", py: "sm", center: "y", style: { justifyContent: "space-between" }, children: [_jsxs(Container, { flex: "row", gap: "sm", center: "y", children: [getFiatCurrencyIcon({
                                        currency: props.paymentMethod.currency,
                                        size: "lg",
                                    }), _jsxs(Container, { flex: "column", gap: "3xs", center: "y", children: [_jsx(Text, { size: "sm", color: "primaryText", style: { fontWeight: 600 }, children: props.paymentMethod.currency }), _jsx(Text, { size: "xs", color: "secondaryText", children: props.paymentMethod.onramp.charAt(0).toUpperCase() +
                                                    props.paymentMethod.onramp.slice(1) })] })] }), _jsx(Text, { size: "sm", color: "primaryText", style: { fontWeight: 600 }, children: props.fromAmount })] }))] }), _jsx(StepConnectorArrow, {}), _jsxs(Container, { flex: "column", bg: "tertiaryBg", style: {
                    borderRadius: radius.lg,
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: [isDifferentRecipient && (_jsx(Container, { flex: "row", gap: "sm", px: "md", py: "sm", style: {
                            borderBottom: `1px solid ${theme.colors.borderColor}`,
                        }, children: _jsx(WalletRow, { address: props.receiver, client: props.client, iconSize: "md", textSize: "sm" }) })), props.uiOptions.mode === "direct_payment" && (_jsxs(Container, { flex: "row", gap: "sm", p: "md", center: "y", style: { justifyContent: "space-between" }, children: [_jsxs(Container, { flex: "column", gap: "3xs", center: "y", style: { flex: 1 }, children: [_jsx(Text, { size: "sm", color: "primaryText", style: { fontWeight: 600 }, children: props.uiOptions.metadata?.title || "Payment" }), props.uiOptions.metadata?.description && (_jsx(Text, { size: "xs", color: "secondaryText", children: props.uiOptions.metadata.description }))] }), _jsxs(Container, { flex: "column", gap: "3xs", center: "y", style: { alignItems: "flex-end" }, children: [_jsx(FiatValue, { tokenAmount: props.uiOptions.paymentInfo.amount, token: props.toToken, client: props.client, chain: defineChain(props.toToken.chainId), weight: 600, color: "primaryText", size: "sm" }), _jsxs(Text, { size: "xs", color: "secondaryText", children: [props.uiOptions.paymentInfo.amount, " ", props.toToken.symbol] })] })] })), props.uiOptions.mode === "fund_wallet" && (_jsx(TokenBalanceRow, { token: props.toToken, client: props.client, amount: props.toAmount, onClick: () => { }, style: {
                            background: "transparent",
                            borderRadius: 0,
                            border: "none",
                        } })), props.uiOptions.mode === "transaction" && (_jsx(TransactionOverViewCompact, { uiOptions: props.uiOptions, client: props.client }))] })] }));
}
const TransactionOverViewCompact = (props) => {
    const theme = useCustomTheme();
    const txInfo = useTransactionDetails({
        transaction: props.uiOptions.transaction,
        client: props.client,
    });
    if (!txInfo.data) {
        // Skeleton loading state
        return (_jsxs(Container, { flex: "row", gap: "sm", p: "md", center: "y", style: { justifyContent: "space-between" }, children: [_jsxs(Container, { flex: "column", gap: "3xs", center: "y", style: { flex: 1 }, children: [_jsx("div", { style: {
                                width: "120px",
                                height: "16px",
                                backgroundColor: theme.colors.skeletonBg,
                                borderRadius: spacing.xs,
                            } }), props.uiOptions.metadata?.description && (_jsx("div", { style: {
                                width: "80px",
                                height: "12px",
                                backgroundColor: theme.colors.skeletonBg,
                                borderRadius: spacing.xs,
                            } }))] }), _jsx(Container, { flex: "column", gap: "3xs", center: "y", style: { alignItems: "flex-end" }, children: _jsx("div", { style: {
                            width: "100px",
                            height: "24px",
                            backgroundColor: theme.colors.skeletonBg,
                            borderRadius: spacing.sm,
                        } }) })] }));
    }
    return (_jsxs(Container, { flex: "row", gap: "sm", p: "md", center: "y", style: { justifyContent: "space-between" }, children: [_jsxs(Container, { flex: "column", gap: "3xs", center: "y", style: { flex: 1 }, children: [_jsx(Text, { size: "sm", color: "primaryText", style: { fontWeight: 600 }, children: props.uiOptions.metadata?.title || "Transaction" }), props.uiOptions.metadata?.description && (_jsx(Text, { size: "xs", color: "secondaryText", children: props.uiOptions.metadata.description }))] }), _jsx(Container, { flex: "column", gap: "3xs", center: "y", style: { alignItems: "flex-end" }, children: _jsx(Text, { size: "xs", color: "secondaryText", style: {
                        fontFamily: "monospace",
                        textAlign: "right",
                        backgroundColor: theme.colors.secondaryButtonBg,
                        padding: `${spacing.xs} ${spacing.sm}`,
                        borderRadius: spacing.sm,
                    }, children: txInfo.data.functionInfo.functionName }) })] }));
};
//# sourceMappingURL=PaymentOverview.js.map