"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { radius, spacing } from "../../../../core/design-system/index.js";
import { useBridgeQuote } from "../../../../core/hooks/useBridgeQuote.js";
import { formatTokenAmount } from "../../ConnectWallet/screens/formatTokenBalance.js";
import { Skeleton } from "../../components/Skeleton.js";
import { Spacer } from "../../components/Spacer.js";
import { Container } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Text } from "../../components/text.js";
import { TokenAndChain } from "../common/TokenAndChain.js";
function PaymentMethodTokenRow({ paymentMethod, destinationToken, destinationAmount, client, onPaymentMethodSelected, }) {
    const theme = useCustomTheme();
    // Fetch individual quote for this specific token pair
    const { data: quote, isLoading: quoteLoading, error: quoteError, } = useBridgeQuote({
        originToken: paymentMethod.originToken,
        destinationToken,
        destinationAmount,
        client,
    });
    // Use the fetched originAmount if available, otherwise fall back to the one from paymentMethod
    const displayOriginAmount = quote?.originAmount;
    const hasEnoughBalance = displayOriginAmount
        ? paymentMethod.balance >= displayOriginAmount
        : false;
    return (_jsx(Button, { variant: "secondary", fullWidth: true, onClick: () => onPaymentMethodSelected(paymentMethod), disabled: !hasEnoughBalance, style: {
            border: `1px solid ${theme.colors.borderColor}`,
            borderRadius: radius.md,
            padding: `${spacing.sm} ${spacing.md}`,
            backgroundColor: theme.colors.tertiaryBg,
            opacity: hasEnoughBalance ? 1 : 0.5,
            textAlign: "left",
        }, children: _jsxs(Container, { flex: "row", gap: "md", style: { width: "100%", alignItems: "center" }, children: [_jsx(TokenAndChain, { token: paymentMethod.originToken, client: client, size: "lg", style: {
                        maxWidth: "50%",
                    } }), _jsxs(Container, { flex: "column", gap: "3xs", style: { flex: 1, alignItems: "flex-end" }, children: [quoteLoading ? (_jsxs(_Fragment, { children: [_jsx(Skeleton, { width: "80px", height: "16px" }), _jsxs(Container, { flex: "row", gap: "3xs", children: [_jsx(Skeleton, { width: "50px", height: "12px" }), _jsx(Skeleton, { width: "40px", height: "12px" })] })] })) : quoteError ? (_jsx(Text, { size: "sm", color: "danger", style: { fontWeight: 600 }, children: "Quote failed" })) : displayOriginAmount ? (_jsxs(Text, { size: "sm", color: "primaryText", style: { fontWeight: 600, textWrap: "nowrap" }, children: [formatTokenAmount(displayOriginAmount, paymentMethod.originToken.decimals), " ", paymentMethod.originToken.symbol] })) : ("--.--"), !quoteLoading && (_jsxs(Container, { flex: "row", gap: "3xs", children: [_jsxs(Text, { size: "xs", color: "secondaryText", children: ["Balance:", " "] }), _jsx(Text, { size: "xs", color: !quoteLoading
                                        ? hasEnoughBalance
                                            ? "success"
                                            : "danger"
                                        : "secondaryText", children: formatTokenAmount(paymentMethod.balance, paymentMethod.originToken.decimals) })] }))] })] }) }, `${paymentMethod.originToken.address}-${paymentMethod.originToken.chainId}`));
}
export function TokenSelection({ paymentMethods, paymentMethodsLoading, client, onPaymentMethodSelected, onBack, destinationToken, destinationAmount, }) {
    const theme = useCustomTheme();
    if (paymentMethodsLoading) {
        return (_jsxs(_Fragment, { children: [_jsx(Text, { size: "md", color: "primaryText", children: "Loading your tokens" }), _jsx(Spacer, { y: "sm" }), _jsx(Container, { flex: "column", gap: "sm", children: [1, 2, 3].map((i) => (_jsx(Container, { style: {
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: radius.md,
                            padding: `${spacing.sm} ${spacing.md}`,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: _jsxs(Container, { flex: "row", gap: "md", style: { width: "100%", alignItems: "center" }, children: [_jsxs(Container, { flex: "row", gap: "sm", center: "y", style: { maxWidth: "50%" }, children: [_jsx("div", { style: {
                                                width: "32px",
                                                height: "32px",
                                                backgroundColor: theme.colors.skeletonBg,
                                                borderRadius: "50%",
                                            } }), _jsxs(Container, { flex: "column", gap: "3xs", children: [_jsx(Skeleton, { width: "60px", height: "14px" }), _jsx(Skeleton, { width: "40px", height: "12px" })] })] }), _jsxs(Container, { flex: "column", gap: "3xs", style: { flex: 1, alignItems: "flex-end" }, children: [_jsx(Skeleton, { width: "80px", height: "16px" }), _jsxs(Container, { flex: "row", gap: "3xs", children: [_jsx(Skeleton, { width: "50px", height: "12px" }), _jsx(Skeleton, { width: "40px", height: "12px" })] })] })] }) }, i))) })] }));
    }
    if (paymentMethods.length === 0) {
        return (_jsxs(Container, { flex: "column", center: "both", style: { minHeight: "250px" }, children: [_jsx(Text, { size: "md", color: "primaryText", center: true, children: "No available tokens found for this wallet" }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { size: "sm", color: "secondaryText", center: true, children: "Try connecting a different wallet or pay with card" }), _jsx(Spacer, { y: "lg" }), _jsx(Button, { variant: "primary", onClick: onBack, children: "Select another payment method" })] }));
    }
    return (_jsxs(_Fragment, { children: [_jsx(Text, { size: "md", color: "primaryText", children: "Select payment token" }), _jsx(Spacer, { y: "sm" }), _jsx(Container, { flex: "column", gap: "sm", style: {
                    maxHeight: "400px",
                    overflowY: "auto",
                    scrollbarWidth: "none",
                }, children: paymentMethods
                    .filter((method) => method.type === "wallet")
                    .map((method) => (_jsx(PaymentMethodTokenRow, { paymentMethod: method, destinationToken: destinationToken, destinationAmount: destinationAmount, client: client, onPaymentMethodSelected: onPaymentMethodSelected }, `${method.originToken.address}-${method.originToken.chainId}`))) })] }));
}
//# sourceMappingURL=TokenSelection.js.map