"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { getAddress } from "../../../../utils/address.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, radius, spacing, } from "../../../core/design-system/index.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { ConnectButton } from "../ConnectWallet/ConnectButton.js";
import { PoweredByThirdweb } from "../ConnectWallet/PoweredByTW.js";
import { OutlineWalletIcon } from "../ConnectWallet/icons/OutlineWalletIcon.js";
import { WalletRow } from "../ConnectWallet/screens/Buy/swap/WalletRow.js";
import { Spacer } from "../components/Spacer.js";
import { Container } from "../components/basic.js";
import { Button } from "../components/buttons.js";
import { Input } from "../components/formElements.js";
import { Text } from "../components/text.js";
import { TokenAndChain } from "./common/TokenAndChain.js";
import { WithHeader } from "./common/WithHeader.js";
export function FundWallet({ client, receiverAddress, uiOptions, onContinue, presetOptions = [5, 10, 20], connectOptions, }) {
    const [amount, setAmount] = useState(uiOptions.initialAmount ?? "");
    const theme = useCustomTheme();
    const account = useActiveAccount();
    const receiver = receiverAddress ?? account?.address;
    const handleAmountChange = (inputValue) => {
        let processedValue = inputValue;
        // Replace comma with period if it exists
        processedValue = processedValue.replace(",", ".");
        if (processedValue.startsWith(".")) {
            processedValue = `0${processedValue}`;
        }
        const numValue = Number(processedValue);
        if (Number.isNaN(numValue)) {
            return;
        }
        if (processedValue.startsWith("0") && !processedValue.startsWith("0.")) {
            setAmount(processedValue.slice(1));
        }
        else {
            setAmount(processedValue);
        }
    };
    const getAmountFontSize = () => {
        const length = amount.length;
        if (length > 12)
            return fontSize.md;
        if (length > 8)
            return fontSize.lg;
        return fontSize.xl;
    };
    const isValidAmount = amount && Number(amount) > 0;
    const focusInput = () => {
        const input = document.querySelector("#amount-input");
        input?.focus();
    };
    const handleQuickAmount = (usdAmount) => {
        if (uiOptions.destinationToken.priceUsd === 0) {
            return;
        }
        // Convert USD amount to token amount using token price
        const tokenAmount = usdAmount / uiOptions.destinationToken.priceUsd;
        // Format to reasonable decimal places (up to 6 decimals, remove trailing zeros)
        const formattedAmount = Number.parseFloat(tokenAmount.toFixed(6)).toString();
        setAmount(formattedAmount);
    };
    return (_jsxs(WithHeader, { uiOptions: uiOptions, defaultTitle: `Buy ${uiOptions.destinationToken.symbol}`, client: client, children: [_jsxs(Container, { flex: "column", children: [_jsxs(Container, { flex: "row", center: "both", gap: "3xs", p: "md", style: {
                            flexWrap: "nowrap",
                            border: `1px solid ${theme.colors.borderColor}`,
                            borderRadius: radius.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: [_jsx(TokenAndChain, { token: uiOptions.destinationToken, client: client, size: "xl" }), _jsxs(Container, { flex: "column", gap: "3xs", center: "x", expand: true, style: {
                                    justifyContent: "flex-end",
                                    alignItems: "flex-end",
                                }, children: [_jsx("div", { style: { cursor: "text" }, onClick: focusInput, onKeyDown: (e) => {
                                            if (e.key === "Enter" || e.key === " ") {
                                                e.preventDefault();
                                                focusInput();
                                            }
                                        }, role: "button", tabIndex: 0, children: _jsx(Container, { flex: "row", center: "y", gap: "xs", style: {
                                                flexWrap: "nowrap",
                                                justifyContent: "flex-end",
                                            }, children: _jsx(Input, { id: "amount-input", variant: "transparent", pattern: "^[0-9]*[.,]?[0-9]*$", inputMode: "decimal", placeholder: "0", type: "text", "data-placeholder": amount === "", value: amount || "0", onClick: (e) => {
                                                    // put cursor at the end of the input
                                                    if (amount === "") {
                                                        e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                                    }
                                                }, onChange: (e) => {
                                                    handleAmountChange(e.target.value);
                                                }, style: {
                                                    fontSize: getAmountFontSize(),
                                                    fontWeight: 600,
                                                    textAlign: "right",
                                                    padding: "0",
                                                    border: "none",
                                                    boxShadow: "none",
                                                } }) }) }), _jsx(Container, { flex: "row", center: "both", style: { height: fontSize.lg, flexWrap: "nowrap" }, children: _jsxs(Text, { size: "md", color: "secondaryText", style: { textWrap: "nowrap" }, children: ["\u2248 $", (Number(amount) * uiOptions.destinationToken.priceUsd).toFixed(2)] }) })] })] }), presetOptions && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "row", center: "x", gap: "xs", style: {
                                    justifyContent: "space-evenly",
                                }, children: presetOptions?.map((amount) => (_jsxs(Button, { variant: "outline", onClick: () => handleQuickAmount(Number(amount)), style: {
                                        padding: `${spacing.sm} ${spacing.md}`,
                                        fontSize: fontSize.sm,
                                        flex: 1,
                                        backgroundColor: theme.colors.tertiaryBg,
                                    }, children: ["$", amount] }, amount))) })] })), _jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "row", gap: "sm", px: "md", py: "sm", center: "y", color: "secondaryText", style: {
                            border: `1px solid ${theme.colors.borderColor}`,
                            backgroundColor: theme.colors.tertiaryBg,
                            borderRadius: radius.md,
                        }, children: receiver ? (_jsx(WalletRow, { address: receiver, client: client, iconSize: "md", textSize: "sm" })) : (_jsxs(_Fragment, { children: [_jsx(OutlineWalletIcon, { size: iconSize.md }), _jsx(Text, { size: "sm", color: "secondaryText", style: {
                                        flex: 1,
                                    }, children: "No Wallet Connected" })] })) })] }), _jsx(Spacer, { y: "lg" }), receiver ? (_jsxs(Button, { variant: "primary", fullWidth: true, disabled: !isValidAmount, onClick: () => {
                    if (isValidAmount) {
                        onContinue(amount, uiOptions.destinationToken, getAddress(receiver));
                    }
                }, style: {
                    padding: `${spacing.sm} ${spacing.md}`,
                    fontSize: fontSize.md,
                }, children: ["Buy ", amount, " ", uiOptions.destinationToken.symbol] })) : (_jsx(ConnectButton, { client: client, theme: theme, connectButton: {
                    label: `Buy ${amount} ${uiOptions.destinationToken.symbol}`,
                }, ...connectOptions })), _jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {}), _jsx(Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=FundWallet.js.map