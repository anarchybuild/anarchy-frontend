"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { getAddress, shortenAddress, } from "../../../../utils/address.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, spacing } from "../../../core/design-system/index.js";
import { useChainMetadata } from "../../../core/hooks/others/useChainQuery.js";
import { useTransactionDetails } from "../../../core/hooks/useTransactionDetails.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { ConnectButton } from "../ConnectWallet/ConnectButton.js";
import { PoweredByThirdweb } from "../ConnectWallet/PoweredByTW.js";
import { ChainName } from "../components/ChainName.js";
import { Spacer } from "../components/Spacer.js";
import { Container, Line } from "../components/basic.js";
import { Button } from "../components/buttons.js";
import { Text } from "../components/text.js";
import { ChainIcon } from "./common/TokenAndChain.js";
import { WithHeader } from "./common/WithHeader.js";
export function TransactionPayment({ uiOptions, client, onContinue, connectOptions, }) {
    const theme = useCustomTheme();
    const activeAccount = useActiveAccount();
    // Get chain metadata for native currency symbol
    const chainMetadata = useChainMetadata(uiOptions.transaction.chain);
    // Use the extracted hook for transaction details
    const transactionDataQuery = useTransactionDetails({
        transaction: uiOptions.transaction,
        client,
    });
    const contractName = transactionDataQuery.data?.contractMetadata?.name || "Unknown Contract";
    const functionName = transactionDataQuery.data?.functionInfo?.functionName || "Contract Call";
    const isLoading = transactionDataQuery.isLoading || chainMetadata.isLoading;
    const buttonLabel = `Execute ${functionName}`;
    // Skeleton component for loading state
    const SkeletonRow = ({ width = "100%" }) => (_jsxs(Container, { flex: "row", style: {
            justifyContent: "space-between",
            alignItems: "center",
        }, children: [_jsx("div", { style: {
                    width: "30%",
                    height: "16px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: spacing.xs,
                } }), _jsx("div", { style: {
                    width,
                    height: "16px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: spacing.xs,
                } })] }));
    const SkeletonHeader = () => (_jsxs(Container, { flex: "row", center: "y", gap: "3xs", style: {
            justifyContent: "space-between",
        }, children: [_jsx("div", { style: {
                    width: "80px",
                    height: "32px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: spacing.xs,
                } }), _jsx("div", { style: {
                    width: "120px",
                    height: "24px",
                    backgroundColor: theme.colors.skeletonBg,
                    borderRadius: spacing.sm,
                } })] }));
    if (isLoading) {
        return (_jsxs(WithHeader, { uiOptions: uiOptions, defaultTitle: "Transaction", client: client, children: [_jsx(SkeletonHeader, {}), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsx(SkeletonRow, { width: "60%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { width: "40%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { width: "50%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { width: "45%" }), _jsx(Spacer, { y: "xs" }), _jsx(SkeletonRow, { width: "55%" }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "lg" }), _jsx("div", { style: {
                        width: "100%",
                        height: "48px",
                        backgroundColor: theme.colors.skeletonBg,
                        borderRadius: spacing.md,
                    } }), _jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {}), _jsx(Spacer, { y: "md" })] }));
    }
    return (_jsxs(WithHeader, { uiOptions: uiOptions, defaultTitle: "Transaction", client: client, children: [_jsxs(Container, { flex: "row", center: "y", gap: "3xs", style: {
                    justifyContent: "space-between",
                }, children: [_jsx(Text, { size: "xl", color: "primaryText", weight: 700, children: transactionDataQuery.data?.usdValueDisplay ||
                            transactionDataQuery.data?.txCostDisplay }), _jsx(Text, { size: "md", color: "secondaryText", style: {
                            fontFamily: "monospace",
                            textAlign: "right",
                            backgroundColor: theme.colors.tertiaryBg,
                            padding: `${spacing.xs} ${spacing.sm}`,
                            borderRadius: spacing.sm,
                        }, children: functionName })] }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsxs(Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [_jsx(Text, { size: "sm", color: "secondaryText", children: "Contract" }), _jsx(Text, { size: "sm", color: "primaryText", children: contractName })] }), _jsx(Spacer, { y: "xs" }), _jsxs(Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [_jsx(Text, { size: "sm", color: "secondaryText", children: "Address" }), _jsx("a", { href: `https://thirdweb.com/${uiOptions.transaction.chain.id}/${uiOptions.transaction.to}`, target: "_blank", rel: "noopener noreferrer", style: {
                            color: theme.colors.accentText,
                            textDecoration: "none",
                            fontFamily: "monospace",
                            fontSize: fontSize.sm,
                        }, children: shortenAddress(uiOptions.transaction.to) })] }), _jsx(Spacer, { y: "xs" }), _jsxs(Container, { flex: "row", style: {
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [_jsx(Text, { size: "sm", color: "secondaryText", children: "Network" }), _jsxs(Container, { flex: "row", gap: "3xs", center: "y", children: [_jsx(ChainIcon, { chain: uiOptions.transaction.chain, size: "xs", client: client }), _jsx(ChainName, { chain: uiOptions.transaction.chain, client: client, size: "sm", color: "primaryText", short: true, style: {
                                    fontFamily: "monospace",
                                } })] })] }), _jsx(Spacer, { y: "xs" }), transactionDataQuery.data?.txCostDisplay && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", style: {
                            justifyContent: "space-between",
                            alignItems: "center",
                        }, children: [_jsx(Text, { size: "sm", color: "secondaryText", children: "Cost" }), _jsx(Text, { size: "sm", color: "primaryText", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.txCostDisplay })] }), _jsx(Spacer, { y: "xs" })] })), transactionDataQuery.data?.gasCostDisplay && (_jsxs(_Fragment, { children: [_jsxs(Container, { flex: "row", style: {
                            justifyContent: "space-between",
                            alignItems: "center",
                        }, children: [_jsx(Text, { size: "sm", color: "secondaryText", children: "Network fees" }), _jsx(Text, { size: "sm", color: "primaryText", style: {
                                    fontFamily: "monospace",
                                }, children: transactionDataQuery.data?.gasCostDisplay })] }), _jsx(Spacer, { y: "md" })] })), _jsx(Line, {}), _jsx(Spacer, { y: "lg" }), activeAccount ? (_jsx(Button, { variant: "primary", fullWidth: true, onClick: () => {
                    if (transactionDataQuery.data?.tokenInfo) {
                        onContinue(transactionDataQuery.data.totalCost, transactionDataQuery.data.tokenInfo, getAddress(activeAccount.address));
                    }
                }, style: {
                    padding: `${spacing.sm} ${spacing.md}`,
                    fontSize: fontSize.md,
                }, children: buttonLabel })) : (_jsx(ConnectButton, { client: client, theme: theme, connectButton: {
                    label: buttonLabel,
                }, ...connectOptions })), _jsx(Spacer, { y: "md" }), _jsx(PoweredByThirdweb, {}), _jsx(Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=TransactionPayment.js.map