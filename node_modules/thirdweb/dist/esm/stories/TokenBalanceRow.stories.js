import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ethereum } from "../chains/chain-definitions/ethereum.js";
import { CustomThemeProvider } from "../react/core/design-system/CustomThemeProvider.js";
import { TokenBalanceRow } from "../react/web/ui/Bridge/common/TokenBalanceRow.js";
import { ETH, UNI, USDC } from "./Bridge/fixtures.js";
import { storyClient } from "./utils.js";
const dummyBalanceETH = "1.2345";
const dummyBalanceUSDC = "1234.56";
const dummyBalanceLowUNI = "0.0012";
// Wrapper component to provide theme context
const TokenBalanceRowWithTheme = (props) => {
    const { theme, ...tokenBalanceRowProps } = props;
    return (_jsx(CustomThemeProvider, { theme: theme, children: _jsx(TokenBalanceRow, { ...tokenBalanceRowProps }) }));
};
const meta = {
    title: "Bridge/TokenBalanceRow",
    component: TokenBalanceRowWithTheme,
    parameters: {
        layout: "centered",
        docs: {
            description: {
                component: "A row component that displays token balance information including token icon, symbol, chain, balance amount and fiat value. Used in bridge interfaces for token selection.",
            },
        },
    },
    tags: ["autodocs"],
    args: {
        client: storyClient,
        token: ETH,
        chain: ethereum,
        amount: dummyBalanceETH,
        onClick: (_token) => { },
        theme: "dark",
    },
    argTypes: {
        theme: {
            control: "select",
            options: ["light", "dark"],
            description: "Theme for the component",
        },
        onClick: {
            action: "clicked",
            description: "Callback function when token row is clicked",
        },
    },
};
export const TokenList = {
    render: (args) => (_jsx(CustomThemeProvider, { theme: args.theme, children: _jsxs("div", { style: {
                display: "flex",
                flexDirection: "column",
                gap: "8px",
                minWidth: "400px",
                maxWidth: "500px",
            }, children: [_jsx(TokenBalanceRow, { client: args.client, token: ETH, amount: dummyBalanceETH, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: ETH, amount: dummyBalanceETH, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: USDC, amount: dummyBalanceUSDC, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: UNI, amount: dummyBalanceLowUNI, onClick: args.onClick })] }) })),
    args: {
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const DarkTokenList = {
    render: (args) => (_jsx(CustomThemeProvider, { theme: args.theme, children: _jsxs("div", { style: {
                display: "flex",
                flexDirection: "column",
                gap: "8px",
                minWidth: "400px",
                maxWidth: "500px",
            }, children: [_jsx(TokenBalanceRow, { client: args.client, token: ETH, amount: dummyBalanceETH, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: ETH, amount: dummyBalanceETH, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: USDC, amount: dummyBalanceUSDC, onClick: args.onClick }), _jsx(TokenBalanceRow, { client: args.client, token: UNI, amount: dummyBalanceLowUNI, onClick: args.onClick })] }) })),
    args: {
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export default meta;
//# sourceMappingURL=TokenBalanceRow.stories.js.map