import { jsx as _jsx } from "react/jsx-runtime";
import { ErrorBanner } from "../../react/web/ui/Bridge/ErrorBanner.js";
import { ModalThemeWrapper } from "../utils.js";
const mockNetworkError = new Error("Network connection failed. Please check your internet connection and try again.");
const mockUserRejectedError = new Error("Transaction was rejected by user.");
const mockInsufficientFundsError = new Error("Insufficient funds to complete this transaction.");
const mockGenericError = new Error("An unexpected error occurred.");
// Wrapper component to provide theme context
const ErrorBannerWithTheme = (props) => {
    const { theme, ...componentProps } = props;
    return (_jsx(ModalThemeWrapper, { theme: theme, children: _jsx(ErrorBanner, { ...componentProps }) }));
};
const meta = {
    title: "Bridge/ErrorBanner",
    component: ErrorBannerWithTheme,
    parameters: {
        layout: "centered",
        docs: {
            description: {
                component: "Error banner component that displays user-friendly error messages with retry functionality and optional cancel action.",
            },
        },
    },
    tags: ["autodocs"],
    args: {
        error: mockNetworkError,
        onRetry: () => { },
        onCancel: () => { },
        theme: "dark",
    },
    argTypes: {
        theme: {
            control: "select",
            options: ["light", "dark"],
            description: "Theme for the component",
        },
        onRetry: { action: "retry clicked" },
        onCancel: { action: "cancel clicked" },
    },
};
export default meta;
export const Light = {
    args: {
        theme: "light",
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const Dark = {
    args: {
        theme: "dark",
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const NetworkError = {
    args: {
        theme: "dark",
        error: mockNetworkError,
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const NetworkErrorLight = {
    args: {
        theme: "light",
        error: mockNetworkError,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const UserRejectedError = {
    args: {
        theme: "dark",
        error: mockUserRejectedError,
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const UserRejectedErrorLight = {
    args: {
        theme: "light",
        error: mockUserRejectedError,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const InsufficientFundsError = {
    args: {
        theme: "dark",
        error: mockInsufficientFundsError,
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const InsufficientFundsErrorLight = {
    args: {
        theme: "light",
        error: mockInsufficientFundsError,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const WithoutCancelButton = {
    args: {
        theme: "dark",
        error: mockGenericError,
        onCancel: undefined,
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const WithoutCancelButtonLight = {
    args: {
        theme: "light",
        error: mockGenericError,
        onCancel: undefined,
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
export const EmptyMessage = {
    args: {
        theme: "dark",
        error: new Error(""),
    },
    parameters: {
        backgrounds: { default: "dark" },
    },
};
export const EmptyMessageLight = {
    args: {
        theme: "light",
        error: new Error(""),
    },
    parameters: {
        backgrounds: { default: "light" },
    },
};
//# sourceMappingURL=ErrorBanner.stories.js.map